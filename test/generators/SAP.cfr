//=======================================================
// Generic model
//=======================================================

// ------------------
// Service prototype
// ------------------

abstract Service
    requirements: Requirements  // resources required by a service
    machine -> Machine          // machine the service is allocated to 
    [this in machine.services]  // inverse relationship constraint

// ----------------------------------
// Requirements and Resources prototypes
// ----------------------------------

abstract Requirements
    cpu ->> integer

abstract Resources: Requirements

// ------------------
// Machine prototype
// ------------------

abstract Machine

    services -> Service*        // set of services allocated to this machine
        [this.machine = Machine] // inverse relationship constraint
        
    isFree? // boolean showing whether the machine is free or not
    [isFree <=> no services] // being free means no services allocated

    limits : Resources

    // constraints for limiting total requirements
    //---------------------------------------------
    
    utilization : Resources
        [cpu = sum services.requirements.cpu]
        [cpu < limits.cpu]


// -----------------------------------
// Optimization goals and constraints
// -----------------------------------

abstract Task   
    // total number of machines free
    total_free : integer = #Machine.isFree

//=======================================================
// SSAP problem specifics
//=======================================================

// nothing


//=======================================================
// Particular data (machines and services)
//=======================================================

// machines:

concrete_machine : Machine *
concrete_service : Service *
[#concrete_machine = 4 ]
[#concrete_service = 8 ]
[all  c : concrete_machine | 10 <= c.limits.cpu && c.limits.cpu <= 20 ] 
[all  c : concrete_service | 5 <= c.requirements.cpu && c.requirements.cpu <= 10 ] 


//GoogleCA : Machine
//    [limits.cpu = 10]

//DriveService : Service
//    [requirements.cpu = 2]